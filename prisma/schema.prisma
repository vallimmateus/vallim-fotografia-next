// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Party {
  id           String    @id @default(cuid())
  name         String
  description  String?
  organization String
  coverURL     String
  slug         String    @unique
  fid          String    @unique
  date         DateTime
  publishDate  DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime? @updatedAt
  photos       Photo[]
}

model Photo {
  id       String    @id @default(cuid())
  imageURL String    @unique
  partyId  String
  comments Comment[]
  likes    Likes[]

  party Party @relation(fields: [partyId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  photoId   String
  userId    String

  user  User  @relation(fields: [userId], references: [id])
  photo Photo @relation(fields: [photoId], references: [id])
}

model Likes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  photoId   String
  userId    String

  photo Photo @relation(fields: [photoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])
}

model Account {
  id                 String    @id @default(cuid())
  userId             String
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  userId       String
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  likes         Likes[]
  comment       Comment[]
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}
