generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                    String                  @id @default(cuid())
  name                  String
  type                  String
  description           String?
  coverUrl              String                  @unique
  slug                  String
  fid                   String[]                @unique
  date                  DateTime
  publishDate           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?
  logoUrl               String?                 @unique
  validateByUserEmail   String?
  source                SourceData              @default(drive)
  User                  User?                   @relation(fields: [validateByUserEmail], references: [email])
  OrganizationsOnEvents OrganizationsOnEvents[]
  Photo                 Photo[]

  @@unique([name, date])
}

model Organization {
  id                    String                  @id @default(cuid())
  name                  String                  @unique
  logoFileName          String?                 @unique(map: "Organization_logoUrl_key")
  slug                  String                  @unique
  OrganizationsOnEvents OrganizationsOnEvents[]
}

model OrganizationsOnEvents {
  id             String       @id @default(cuid())
  organizationId String
  eventId        String
  Event          Event        @relation(fields: [eventId], references: [id])
  Organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, eventId])
}

model Photo {
  id         String    @id @default(cuid())
  imageUrlId String    @unique
  name       String
  eventId    String
  Comment    Comment[]
  Like       Like[]
  Event      Event     @relation(fields: [eventId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  photoId   String
  userId    String
  Photo     Photo     @relation(fields: [photoId], references: [id])
  User      User      @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  photoId   String
  userId    String
  Photo     Photo    @relation(fields: [photoId], references: [id])
  User      User     @relation(fields: [userId], references: [id])

  @@unique([photoId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  nickname      String?
  role          Role      @default(user)
  accounts      Account[]
  Comment       Comment[]
  Event         Event[]
  Like          Like[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Role {
  user
  admin
  contentProducer
}

enum SourceData {
  drive
  r2
}
