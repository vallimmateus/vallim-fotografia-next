// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String    @id @default(cuid())
  name        String
  type        String
  description String?
  logoUrl     String?   @unique
  coverUrl    String    @unique
  slug        String
  fid         String[]  @unique
  date        DateTime
  publishDate DateTime?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt

  organizations Organization[]
  photos        Photo[]
}

model Organization {
  id      String  @id @default(cuid())
  name    String  @unique
  logoUrl String? @unique

  events Event[]
}

model Photo {
  id         String @id @default(cuid())
  imageUrlId String @unique
  name       String
  eventId    String

  comments Comment[]
  likes    Likes[]

  event Event @relation(fields: [eventId], references: [id])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
  photoId   String
  userId    String

  user  User  @relation(fields: [userId], references: [id])
  photo Photo @relation(fields: [photoId], references: [id])
}

model Likes {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  photoId   String
  userId    String

  user  User  @relation(fields: [userId], references: [id])
  photo Photo @relation(fields: [photoId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  nickname      String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  comment       Comment[]
  likes         Likes[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
