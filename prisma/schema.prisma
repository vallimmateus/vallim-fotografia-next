generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id                    String                  @id @default(cuid())
  name                  String
  type                  EventType
  description           String?
  logoFileName          String                  @unique
  coverFileName         String                  @unique
  slug                  String
  date                  DateTime
  publishDate           DateTime?
  createdAt             DateTime                @default(now())
  updatedAt             DateTime?
  createdByUserId       String
  createdByUser         User                    @relation(fields: [createdByUserId], references: [id])
  organizationsOnEvents OrganizationsOnEvents[]
  photos                Photo[]
  pendingValidators     ValidatorsOnEvents[]
  completedValidators   ValidatedEvents[]
  photographers         PhotographersOnEvents[]

  @@unique([name, date])
}

model PhotographersOnEvents {
  id             String       @id @default(cuid())
  photographerId String
  eventId        String
  event          Event        @relation(fields: [eventId], references: [id])
  photographer   Photographer @relation(fields: [photographerId], references: [id])

  @@unique([photographerId, eventId])
}

model ValidatorsOnEvents {
  userId  String
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model ValidatedEvents {
  userId  String
  eventId String
  user    User   @relation(fields: [userId], references: [id])
  event   Event  @relation(fields: [eventId], references: [id])

  @@id([userId, eventId])
}

model Organization {
  id                    String                   @id @default(cuid())
  name                  String                   @unique
  logoOriginalName      String                   @unique
  logoS3Key             String
  logoUploadedByUserId  String
  slug                  String                   @unique
  createdAt             DateTime                 @default(now())
  organizationsOnEvents OrganizationsOnEvents[]
  adminMembers          MembersOnOrganizations[]
}

model MembersOnOrganizations {
  userId         String
  organizationId String
  user           User         @relation(fields: [userId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@id([userId, organizationId])
}

model OrganizationsOnEvents {
  id             String       @id @default(cuid())
  organizationId String
  eventId        String
  event          Event        @relation(fields: [eventId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, eventId])
}

model Photo {
  id               String         @id @default(cuid())
  originalName     String
  uploadedByUserId String
  createdAt        DateTime       @default(now())
  eventId          String
  comment          Comment[]
  like             Like[]
  event            Event          @relation(fields: [eventId], references: [id])
  photoVersions    PhotoVersion[]

  @@unique([originalName, eventId])
}

model PhotoVersion {
  id       String @id @default(cuid())
  photoId  String
  type     String
  fileName String
  s3Key    String
  width    Int
  height   Int
  format   String
  photo    Photo  @relation(fields: [photoId], references: [id])

  @@unique([width, height, photoId])
}

model Comment {
  id        String    @id @default(cuid())
  text      String
  createdAt DateTime  @default(now())
  updatedAt DateTime?
  photoId   String
  userId    String
  photo     Photo     @relation(fields: [photoId], references: [id])
  user      User      @relation(fields: [userId], references: [id])
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  photoId   String
  userId    String
  photo     Photo    @relation(fields: [photoId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@unique([photoId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Photographer {
  id          String                  @id @default(cuid())
  email       String
  phone       String
  assignments PhotographersOnEvents[]
  userId      String?                 @unique
  user        User?                   @relation(fields: [userId], references: [id])
}

enum Role {
  user
  admin
  organizationMember
  photographer
  contentProducer
}

model User {
  id               String                   @id @default(cuid())
  name             String?
  email            String?                  @unique
  emailVerified    DateTime?
  image            String?
  nickname         String?
  roles            Role[]                   @default([user])
  accounts         Account[]
  comment          Comment[]
  like             Like[]
  sessions         Session[]
  createdEvents    Event[]
  eventsToValidate ValidatorsOnEvents[]
  validatedEvents  ValidatedEvents[]
  organizations    MembersOnOrganizations[]
  photographer     Photographer?
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum EventType {
  party
  event
}
