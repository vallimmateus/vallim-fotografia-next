generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum EventType {
  party
  event
}

model Event {
  id            String                  @id @default(cuid())
  name          String
  slug          String                  @unique
  description   String?
  type          EventType
  coverFileName String?                 @map("cover_file_name")
  logoFileName  String?                 @map("logo_file_name")
  date          DateTime
  publishedAt   DateTime?               @map("published_at")
  organizations OrganizationsOnEvents[]
  photos        Photo[]

  allowedValidators User[] @relation("allowedToValidate")
  validators        User[] @relation("validated")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")

  @@unique([name, date])
}

model Organization {
  id           String                  @id @default(cuid())
  name         String                  @unique
  slug         String                  @unique
  logoFileName String?                 @map("logo_file_name")
  events       OrganizationsOnEvents[]
}

model OrganizationsOnEvents {
  id             String       @id @default(cuid())
  organizationId String       @map("organization_id")
  eventId        String       @map("event_id")
  event          Event        @relation(fields: [eventId], references: [id])
  organization   Organization @relation(fields: [organizationId], references: [id])

  @@unique([organizationId, eventId])
}

model Photo {
  id       String    @id @default(cuid())
  name     String
  eventId  String    @map("event_id")
  comments Comment[]
  likes    Like[]
  event    Event     @relation(fields: [eventId], references: [id])
}

model Comment {
  id      String @id @default(cuid())
  content String
  photoId String @map("photo_id")
  userId  String @map("user_id")
  likes   Like[]

  photo Photo @relation(fields: [photoId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  parentId      String?   @map("parent_id")
  parent        Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  childComments Comment[] @relation("ChildComments")

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
}

model Like {
  id        String  @id @default(cuid())
  photoId   String? @map("photo_id")
  commentId String? @map("comment_id")
  userId    String  @map("user_id")

  photo   Photo?   @relation(fields: [photoId], references: [id])
  comment Comment? @relation(fields: [commentId], references: [id])
  user    User     @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")

  @@unique([photoId, userId])
  @@unique([commentId, userId])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  user
  admin
  contentProducer
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerifiedAt DateTime? @map("email_verified_at")
  avatarFileName  String?   @map("avatar_file_name")
  nickname        String?
  role            Role      @default(user)

  allowedToValidateEvents Event[] @relation("allowedToValidate")
  validatedEvents         Event[] @relation("validated")

  accounts      Account[]
  comment       Comment[]
  likes         Like[]
  sessions      Session[]
  notifications Notification[]

  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime? @updatedAt @map("updated_at")
}

model Notification {
  id      String  @id @default(cuid())
  message String
  read    Boolean @default(false)
  userId  String  @map("user_id")
  user    User    @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now()) @map("created_at")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
